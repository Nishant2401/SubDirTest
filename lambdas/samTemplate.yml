AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambdas


Parameters:
  CDFURL:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: "CDFURL"
    Description: "CDF url for the lambda"

  LambdaRole:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: "LambdaRole"
    Description: "ARN for the default Lambda Role"


Resources:
#   ProcessModemData:
#     Type: 'AWS::Serverless::Function'
#     Properties:
#       FunctionName: Process-Modem-Data
#       Handler: process-modem-data.lambda_handler
#       Runtime: python3.8
#       CodeUri: ./process-modem-data/lambda-code
#       Description: 'Store required Modem MQTT data in CDF'
#       MemorySize: 128
#       Timeout: 30
#       Role: !Ref LambdaRole
#       Environment:
#         Variables:
#           CDF_URL: !Ref CDFURL
#           # CDF Contractor URL


  # CreateRTRADIOMsg:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     FunctionName: Create-RTRADIO-Msg
  #     Handler: create-RTRADIO-msg.lambda_handler
  #     Runtime: python3.8
  #     CodeUri: ./create-RTRADIO-msg/lambda-code
  #     Description: 'Get data from CDF and construct RTRADIO message'
  #     MemorySize: 128
  #     Timeout: 30
  #     Role: !Ref LambdaRole
  #     Environment:
  #       Variables:
  #         CDF_URL: !Ref CDFURL
  #         # CDF Contractor URL

  # CreateJSON:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     FunctionName: Create-JSON
  #     Handler: create-json.lambda_handler
  #     Runtime: python3.8
  #     CodeUri: ./create-json/lambda-code
  #     Description: 'Create json from raw data'
  #     MemorySize: 128
  #     Timeout: 30
  #     Role: !Ref LambdaRole

  PipelineTestLambda1:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: PipelineTestLambda1
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: ./PipelineTestLambda1/LambdaCode
      Description: 'Lambda for pipeline test - dont delete'
      MemorySize: 128
      Timeout: 30
      Role: !Ref LambdaRole


  PipelineTestLambda2:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: PipelineTestLambda2
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: ./PipelineTestLambda2/LambdaCode
      Description: 'Yet another Lambda for pipeline test'
      MemorySize: 128
      Timeout: 30
      Role: !Ref LambdaRole

  # Step Functions
  consumeCsvDeleteCdfnishanttest:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: consume-csv-delete-cdf-nishanttest
      Type: STANDARD
      Role: arn:aws:iam::083011521439:role/service-role/nonexistantrole
      #Role: !Ref LambdaRole
      Definition:
        {
          "Comment": "State machine deletes CDF entities and certs from csv file loaded to S3",
          "StartAt": "setup",
          "States": {
             "setup": {
              "Comment": "Set up initial values for state machine",
              "Type": "Pass",
              "Next": "consume-csv"
            },
            "consume-csv": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:933020280538:function:Consume-CSV-For-Delete-CDF",
              "ResultPath":"$.taskResult-bottoms-up-consume-csv",
              "Next": "delete-cdf-entity-and-cert"
            },
            "delete-cdf-entity-and-cert": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:933020280538:function:Delete-CDF",
              "ResultPath": "$.taskResult-delete-cdf-entity-and-cert",
              "Next": "check-entity-delete"
            },
            "check-entity-delete": {
              "Type": "Choice",
              "InputPath": "$",
              "Choices": [
                {
                  "Variable": "$.taskResult-delete-cdf-entity-and-cert",
                  "BooleanEquals": true,
                  "Next": "done"
                },
                {
                  "Variable": "$.taskResult-delete-cdf-entity-and-cert",
                  "BooleanEquals": false,
                  "Next": "fail"
                }]
            },
            "done": {
              "Type": "Succeed"
            },
            "fail": {
              "Type": "Fail"
            }
          }
        }